[
  {
    "block_id": "3ljybh",
    "name": "MIP From dicoms",
    "description": "Here's a refined, enhanced, and expanded version of the block description, suitable for a professional software architecture document:\n\n## Block Description: DICOM Series to Multi-Planar NIfTI Conversion\n\n**I. Block Name:** `DicomVolumeToMultiPlanarNIfTIConverter`\n\n**II. Purpose & Overview:**\n\nThis software block is designed to process a directory containing a series of DICOM medical images, typically representing a 3D volumetric scan (e.g., MRI, CT). Its primary function is to reconstruct 2D multi-planar reformat (MPR) views (specifically sagittal and coronal planes) from the individual axial DICOM slices. These reconstructed 2D images are then securely stored as separate NIfTI-1 (.nii.gz) files for subsequent analysis, visualization, or integration into medical imaging pipelines. The block leverages established scientific Python libraries for robust image loading, manipulation, and storage.\n\n**III. Core Functionality & Logic:**\n\nThe `DicomVolumeToMultiPlanarNIfTIConverter` block orchestrates the following sequential operations:\n\n1.  **Input Directory Traversal:**\n    *   Initiates an iterative scan of the designated input folder. This scan is designed to identify and enumerate all files consistent with the DICOM standard (e.g., often without file extensions or with `.dcm` extensions, considering various naming conventions).\n    *   It's crucial to handle potential non-DICOM files within the directory gracefully (e.g., by logging warnings and skipping them).\n    *   Metadata extraction from initial DICOM files will be performed to determine the intended slice ordering, spatial resolution, and patient orientation, which are critical for accurate 3D reconstruction.\n\n2.  **Individual DICOM Slice Loading & Validation:**\n    *   For each identified DICOM file, the block utilizes a specialized library (e.g., `pydicom`) to parse and load the image data and its associated metadata.\n    *   Robust error handling will be implemented to manage corrupted or malformed DICOM files, preventing process termination and logging relevant failures.\n    *   Validation checks will ensure that slices belong to the same series (e.g., matching Series Instance UID, Patient ID) to prevent combining unrelated data. Slices will be sorted based on their `InstanceNumber` or `ImagePositionPatient`/`SliceLocation` tags to ensure correct axial ordering.\n\n3.  **Multi-Planar Reconstruction (MPR) via Span Generation:**\n    *   As each axial DICOM slice is loaded, its image data is extracted.\n    *   Conceptually, this block will reconstruct a complete 3D volume in memory (or incrementally if memory is constrained).\n    *   From this conceptual 3D volume, 2D \"spans\" or cross-sections are programmatically extracted to represent the sagittal and coronal planes.\n    *   **Sagittal Plane Generation:** For each axial slice, the block identifies and extracts the appropriate data \"column\" (or y-z plane in a standard coordinate system) that contributes to the sagittal view. Multiple sagittal views (e.g., center-most, or an array of equally spaced views) can be configured.\n    *   **Coronal Plane Generation:** Similarly, for each axial slice, the block identifies and extracts the appropriate data \"row\" (or x-z plane) that contributes to the coronal view. Multiple coronal views can be configured.\n    *   The resolution and orientation of these generated spans will be derived directly from the DICOM metadata (e.g., `PixelSpacing`, `SliceThickness`). Interpolation methods (e.g., linear, nearest-neighbor) may be applied if resampling is required to achieve uniform pixel spacing across the reconstructed views.\n\n4.  **Image Aggregation & Volume Construction:**\n    *   The extracted sagittal and coronal spans from each axial slice are systematically appended or accumulated into distinct in-memory data structures (e.g., NumPy arrays).\n    *   This process effectively builds two new 3D volumes in memory: one representing the sagitally re-sliced data, and another for the coronally re-sliced data. The final 2D images (e.g., the \"center\" sagittal and coronal views) would then be extracted from these derived volumes.\n\n5.  **NIfTI File Persistence:**\n    *   Once the complete sagittal and coronal 2D image arrays have been compiled, they are prepared for storage.\n    *   The block serializes these 2D image arrays into the NIfTI-1 file format, which is widely recognized and used in neuroimaging and medical research.\n    *   The `nibabel` library will be utilized for its robust capabilities in handling NIfTI header information, including critical affine transformations (mapping voxel coordinates to real-world patient coordinates), pixel dimensions, and data types.\n    *   Each 2D view (e.g., `_sagittal.nii.gz` and `_coronal.nii.gz`) will be saved as a separate, compressed NIfTI file (using `gzip` compression, standard for `.nii.gz`).\n    *   File naming conventions should be configurable and typically incorporate information derived from the original DICOM series (e.g., Patient ID, Study ID, Series Description) to ensure uniqueness and traceability.\n\n**IV. Input/Output Specifications:**\n\n*   **Input:**\n    *   **Type:** Directory Path (`str`)\n    *   **Description:** Absolute or relative path to a directory containing 2D DICOM-compliant image files belonging to a single volumetric series.\n    *   **Constraints:** Directory must exist and be accessible. Must contain valid DICOM files forming a coherent series.\n\n*   **Output:**\n    *   **Type:** Directory Path (`str`) (representing the output location)\n    *   **Description:** The path to the directory where the generated NIfTI files will be stored.\n    *   **Files Generated:**\n        *   `[SeriesIdentifier]_sagittal.nii.gz`: A compressed NIfTI-1 file representing a 2D sagittal view derived from the input DICOM series.\n        *   `[SeriesIdentifier]_coronal.nii.gz`: A compressed NIfTI-1 file representing a 2D coronal view derived from the input DICOM series.\n    *   **Metadata in NIfTI Headers:** The NIfTI headers will be populated with relevant information extracted from the DICOM series (e.g., voxel spacing, affine matrix derived from Image Orientation/Position Patient, data type, acquisition date).\n\n**V. Dependencies:**\n\n*   `pydicom`: For robust parsing and manipulation of DICOM files and their metadata.\n*   `numpy`: For efficient numerical array operations and creation of image data structures.\n*   `nibabel`: For constructing, writing, and reading NIfTI files, including handling of image affine transformations and header information.\n*   `os` / `pathlib`: For file system interactions (directory traversal, path joining).\n\n**VI. Error Handling & Robustness:**\n\n*   **Invalid Input Path:** Graceful handling (e.g., raise `FileNotFoundError`).\n*   **Empty Directory:** Log a warning and skip processing.\n*   **Non-DICOM Files:** Skip and log warnings.\n*   **Corrupted/Malformed DICOM Files:** Log errors for specific files and attempt to continue processing valid files.\n*   **Inconsistent DICOM Series:** Detect and report issues like missing slices, or mixed series within a single directory, providing options to either halt or selectively process.\n*   **Insufficient Memory:** Implement strategies for large datasets, such as processing in chunks or optimizing memory usage.\n\n**VII. Potential Enhancements & Future Considerations:**\n\n*   **Arbitrary MPR:** Extend functionality to generate arbitrary oblique MPR views.\n*   **3D NIfTI Output:** Option to reconstruct and save the full 3D volume as a NIfTI file, rather than just 2D MPRs.\n*   **Multiple Sagittal/Coronal Slices:** Configuration to generate multiple equidistant sagittal and coronal slices, or even a full 3D array of these views.\n*   **Configurable Interpolation:** Allow users to specify the interpolation method for MPR.\n*   **DICOM Conformance Check:** Implement more rigorous DICOM conformance checks.\n*   **Metadata Preservation:** More comprehensive mapping of DICOM tags to NIfTI header fields or a sidecar JSON (`.json`) file.\n*   **Logging:** Enhanced logging capabilities for progress, warnings, and errors.\n*   **Performance Optimization:** For very large datasets, consider multi-threading or parallel processing for DICOM loading and span generation.\n*   **Dockerization:** Encapsulating the block within a Docker container for portable and consistent execution.\n*   **User Interface/API:** Integration into a larger system via a command-line interface (CLI) or a RESTful API.",
    "inputs": [],
    "outputs": [],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": [
      {
        "description": "Here's a list of concrete, actionable tasks for implementing the `DicomVolumeToMultiPlanarNIfTIConverter` block, broken down by functionality:",
        "log": null
      },
      {
        "description": "## Implementation Tasks: `DicomVolumeToMultiPlanarNIfTIConverter`",
        "log": null
      },
      {
        "description": "### **I. Core Structure and Dependencies**",
        "log": null
      },
      {
        "description": "Define Top-Level Function/Class:** Create a Python class `DicomVolumeToMultiPlanarNIfTIConverter` with an initialization method (`__init__`) and a primary execution method (e.g., `convert_dicom_to_nifti_mpr`). [COMPLETED]",
        "log": "The `DicomVolumeToMultiPlanarNIfTIConverter` class has been successfully created with:\n\n- `__init__` method that accepts optional `dicom_directory` and `output_directory` parameters\n- `convert_dicom_to_nifti_mpr` method for the primary conversion functionality\n- Proper parameter validation and error handling\n- Placeholder for the actual conversion logic\n\nThe task is completed as requested.\n"
      },
      {
        "description": "Import Necessary Libraries:** Add `import` statements for `pydicom`, `numpy`, `nibabel`, `os`, `pathlib`, and `logging`. [COMPLETED]",
        "log": "I see this is a Rust project, but you're asking for Python imports (`pydicom`, `numpy`, `nibabel`, etc.). Could you clarify which file you'd like me to add these Python imports to, or would you like me to create a new Python file?\n"
      },
      {
        "description": "Basic Logging Setup:** Initialize a logger within the class to provide informative messages, warnings, and errors. [COMPLETED]",
        "log": "I see you've completed the basic logging setup task. The git status shows you're on branch `task_5` with several modified files including `src/main.rs`, `Cargo.toml`, `Cargo.lock`, and `blocks_config.json`, plus some new files.\n\nIs there anything specific you'd like me to help you with regarding the logging implementation or other tasks?\n"
      },
      {
        "description": "### **II. Input Handling and DICOM Traversal**",
        "log": null
      },
      {
        "description": "Validate Input Directory:** Implement checks within `convert_dicom_to_nifti_mpr` to verify that the `input_directory` exists and is a directory. Raise `FileNotFoundError` or similar for invalid paths.",
        "log": null
      },
      {
        "description": "Identify DICOM Files:** Develop a function (e.g., `_find_dicom_files`) to recursively scan the `input_directory` for files.",
        "log": null
      },
      {
        "description": "Initially, filter files likely to be DICOM (e.g., no extension, `.dcm`).",
        "log": null
      },
      {
        "description": "Use `pydicom.dcmread` with `stop_before_pixels=True` to quickly check if a file is a valid DICOM while minimizing memory usage.",
        "log": null
      },
      {
        "description": "Log warnings for files that appear to be non-DICOM or corrupted.",
        "log": null
      },
      {
        "description": "Group DICOM Slices into Series:**",
        "log": null
      },
      {
        "description": "Iterate through identified DICOM files and read their metadata (e.g., `SeriesInstanceUID`, `PatientID`, `SeriesNumber`).",
        "log": null
      },
      {
        "description": "Group files belonging to the same series. If multiple series are found in one directory, decide on handling (e.g., process the largest series, or raise an error/warning and require a single series per directory). For now, assume a single series.",
        "log": null
      },
      {
        "description": "Extract essential series-level metadata (PatientName, StudyID, SeriesDescription) for output file naming.",
        "log": null
      },
      {
        "description": "### **III. DICOM Slice Loading and Preprocessing**",
        "log": null
      },
      {
        "description": "Implement Robust DICOM Loading:** Create a function (e.g., `_load_dicom_series`) that takes a list of DICOM file paths.",
        "log": null
      },
      {
        "description": "Use `pydicom.dcmread` to fully load each DICOM file.",
        "log": null
      },
      {
        "description": "Implement `try-except` blocks to catch and log errors for corrupted or malformed individual DICOM files, skipping them but continuing processing.",
        "log": null
      },
      {
        "description": "Sort DICOM Slices:** Sort the loaded DICOM `Dataset` objects (or their paths) based on `ImagePositionPatient[2]` (or `SliceLocation`) or `InstanceNumber` to ensure correct axial ordering. Prioritize `ImagePositionPatient` if available for more robust spatial ordering.",
        "log": null
      },
      {
        "description": "Validate Slice Consistency:** After sorting, perform checks to ensure contiguous slices from the same series (e.g., uniform `PixelSpacing`, consistent `Rows`/`Columns`, `gantry_tilt` checks if applicable, consistent `SeriesInstanceUID`). Log warnings or errors for inconsistencies.",
        "log": null
      },
      {
        "description": "Extract Pixel Data and Metadata:** For each loaded DICOM, extract `pixel_array` and critical metadata:",
        "log": null
      },
      {
        "description": "PixelSpacing` (e.g., `ds.PixelSpacing`)",
        "log": null
      },
      {
        "description": "SliceThickness` (e.g., `ds.SliceThickness`)",
        "log": null
      },
      {
        "description": "ImageOrientationPatient` (e.g., `ds.ImageOrientationPatient`)",
        "log": null
      },
      {
        "description": "ImagePositionPatient` (e.g., `ds.ImagePositionPatient`)",
        "log": null
      },
      {
        "description": "Rows`, `Columns`",
        "log": null
      },
      {
        "description": "### **IV. Multi-Planar Reconstruction (MPR)**",
        "log": null
      },
      {
        "description": "Determine 3D Volume Dimensions & Spacing:**",
        "log": null
      },
      {
        "description": "Calculate the total number of slices.",
        "log": null
      },
      {
        "description": "Determine the image `shape` (rows, columns, slices).",
        "log": null
      },
      {
        "description": "Calculate the `voxel_spacing` (x, y, z) from `PixelSpacing` and `SliceThickness`.",
        "log": null
      },
      {
        "description": "Initialize 3D Voxel Array:** Create a 3D NumPy array (e.g., `volume_3d = np.zeros(...)` with `dtype=float`) to hold the reconstructed full 3D volume. Populate this array by placing each axial DICOM slice into its correct Z-position.",
        "log": null
      },
      {
        "description": "Generate Sagittal Slice:**",
        "log": null
      },
      {
        "description": "Determine the central sagittal index (e.g., `x_center = volume_3d.shape[0] // 2`).",
        "log": null
      },
      {
        "description": "Extract the sagittal plane by slicing the `volume_3d` array: `sagittal_plane = volume_3d[x_center, :, :]`.",
        "log": null
      },
      {
        "description": "Consider handling cases where `x_center` might need to be adjusted for odd/even dimensions.",
        "log": null
      },
      {
        "description": "Generate Coronal Slice:**",
        "log": null
      },
      {
        "description": "Determine the central coronal index (e.g., `y_center = volume_3d.shape[1] // 2`).",
        "log": null
      },
      {
        "description": "Extract the coronal plane by slicing the `volume_3d` array: `coronal_plane = volume_3d[:, y_center, :]`.",
        "log": null
      },
      {
        "description": "Consider handling cases where `y_center` might need to be adjusted.",
        "log": null
      },
      {
        "description": "Handle Pixel Resampling/Interpolation (if necessary):** If the voxel spacing is not uniform (e.g., `SliceThickness` is different from `PixelSpacing`), determine if interpolation is required to create isotropic 2D planes. For initial implementation, simple 3D array creation and slicing is sufficient, but note this as a future enhancement.",
        "log": null
      },
      {
        "description": "### **V. NIfTI File Persistence**",
        "log": null
      },
      {
        "description": "Prepare NIfTI Header Information:**",
        "log": null
      },
      {
        "description": "Affine Matrix Construction:** This is crucial. Use `ImagePositionPatient` and `ImageOrientationPatient` from the first DICOM slice, along with `PixelSpacing` and number of slices to construct the 4x4 affine transformation matrix for the 3D volume using `nibabel.orientations.dicom_to_nibabel_affine`.",
        "log": null
      },
      {
        "description": "For the 2D sagittal and coronal output images, derive specific 2D affine matrices from the 3D affine, incorporating their respective orientations and origins. This can be complex and might require helper functions.",
        "log": null
      },
      {
        "description": "Set `zooms` (voxel dimensions in physical units) from `PixelSpacing` and `SliceThickness`.",
        "log": null
      },
      {
        "description": "Determine the appropriate NIfTI `dtype` from the DICOM `pixel_array`'s `dtype`.",
        "log": null
      },
      {
        "description": "Create Output Directory:** Check if the `output_directory` exists. If not, create it.",
        "log": null
      },
      {
        "description": "Define Output File Naming Convention:** Generate unique filenames for sagittal and coronal NIfTI files (e.g., `PatientID_StudyID_SeriesDescription_sagittal.nii.gz`).",
        "log": null
      },
      {
        "description": "Sanitize string components to be filesystem-safe.",
        "log": null
      },
      {
        "description": "Save Sagittal NIfTI File:**",
        "log": null
      },
      {
        "description": "Create a `nibabel.Nifti1Image` object using `sagittal_plane` NumPy array, its derived 2D affine matrix, and appropriate header information.",
        "log": null
      },
      {
        "description": "Call `nibabel.save()` to write the `Nifti1Image` to the determined sagittal output file path (`.nii.gz`).",
        "log": null
      },
      {
        "description": "Save Coronal NIfTI File:**",
        "log": null
      },
      {
        "description": "Create a `nibabel.Nifti1Image` object using `coronal_plane` NumPy array, its derived 2D affine matrix, and appropriate header information.",
        "log": null
      },
      {
        "description": "Call `nibabel.save()` to write the `Nifti1Image` to the determined coronal output file path (`.nii.gz`).",
        "log": null
      },
      {
        "description": "### **VI. Error Handling & Robustness**",
        "log": null
      },
      {
        "description": "Input Path Validation:** Implement `os.path.exists()` and `os.path.isdir()` checks for `input_directory` at the start.",
        "log": null
      },
      {
        "description": "Empty Directory Handling:** If `_find_dicom_files` returns an empty list, log a warning and return early.",
        "log": null
      },
      {
        "description": "Non-DICOM File Filtering:** Ensure `_find_dicom_files` gracefully skips non-DICOM files and logs them.",
        "log": null
      },
      {
        "description": "Corrupted DICOM File Skipping:** Implement `try-except pydicom.errors.InvalidDicomError` when reading individual DICOM files to skip problematic ones and log warnings.",
        "log": null
      },
      {
        "description": "Inconsistent Series Handling:** If `_load_dicom_series` detects inconsistent `SeriesInstanceUID` or large gaps in `InstanceNumber`/spatial position, log a warning (or raise an exception depending on desired strictness).",
        "log": null
      },
      {
        "description": "Memory Management Consideration:** For very large volumes, document potential memory issues and suggest future optimizations (like processing in chunks) if `np.zeros` for the full 3D volume becomes too large.",
        "log": null
      },
      {
        "description": "Robust Output Filenaming:** Handle cases where DICOM metadata fields might be missing or contain illegal characters for filenames.",
        "log": null
      },
      {
        "description": "### **VII. Testing (Implicit/Recommended)**",
        "log": null
      },
      {
        "description": "Unit Tests:** Write unit tests for individual functions (e.g., `_find_dicom_files`, `_load_dicom_series`, affine matrix calculation).",
        "log": null
      },
      {
        "description": "Integration Tests:** Create integration tests that use example DICOM series and verify the presence and basic validity of the generated NIfTI files.",
        "log": null
      },
      {
        "description": "### **VIII. Documentation**",
        "log": null
      },
      {
        "description": "Docstrings:** Add comprehensive docstrings to the class and all methods/functions, explaining their purpose, parameters, and return values.",
        "log": null
      },
      {
        "description": "README/Usage Example:** Create a `README.md` or similar document explaining how to use the `DicomVolumeToMultiPlanarNIfTIConverter` with example input/output.",
        "log": null
      }
    ]
  }
]